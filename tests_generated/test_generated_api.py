# Generated by AegisAPI Agent
import httpx, json
from jsonschema import validate
BASE_URL="http://localhost:4010"

def test_get_users():
    with httpx.Client(timeout=10) as client:
        resp = client.request("GET", BASE_URL + "/users", params={}, json={}, headers={"Accept":"application/json"})
    assert resp.status_code in [200]
    schema = {"properties": {"items": {"items": {"$ref": "#/components/schemas/User"}, "type": "array"}}, "required": [], "type": "object"}
    if schema:
        try: payload = resp.json()
        except Exception: payload = None
        if payload is not None:
            validate(instance=payload, schema=schema)

def test_get_users__id_():
    with httpx.Client(timeout=10) as client:
        resp = client.request("GET", BASE_URL + "/users/{id}", params={'id': 1}, json={}, headers={"Accept":"application/json"})
    assert resp.status_code in [200]
    schema = {"$ref": "#/components/schemas/User", "properties": {}, "required": []}
    if schema:
        try: payload = resp.json()
        except Exception: payload = None
        if payload is not None:
            validate(instance=payload, schema=schema)

def test_get_posts():
    with httpx.Client(timeout=10) as client:
        resp = client.request("GET", BASE_URL + "/posts", params={}, json={}, headers={"Accept":"application/json"})
    assert resp.status_code in [200]
    schema = {"items": {"$ref": "#/components/schemas/Post"}, "properties": {}, "required": [], "type": "array"}
    if schema:
        try: payload = resp.json()
        except Exception: payload = None
        if payload is not None:
            validate(instance=payload, schema=schema)
