<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="3" time="25.680" timestamp="2025-08-27T15:52:36.227283+05:30" hostname="DESKTOP-S10DSVI"><testcase classname="tests_generated.test_generated_api" name="test_get_users" time="7.039"><failure message="httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it">@contextlib.contextmanager
    def map_httpcore_exceptions() -&gt; typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
&gt;           yield

.venv\Lib\site-packages\httpx\_transports\default.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\httpx\_transports\default.py:250: in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpcore\_sync\connection_pool.py:256: in handle_request
    raise exc from None
.venv\Lib\site-packages\httpcore\_sync\connection_pool.py:236: in handle_request
    response = connection.handle_request(
.venv\Lib\site-packages\httpcore\_sync\connection.py:101: in handle_request
    raise exc
.venv\Lib\site-packages\httpcore\_sync\connection.py:78: in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpcore\_sync\connection.py:124: in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpcore\_backends\sync.py:207: in connect_tcp
    with map_exceptions(exc_map):
C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:158: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

map = {&lt;class 'TimeoutError'&gt;: &lt;class 'httpcore.ConnectTimeout'&gt;, &lt;class 'OSError'&gt;: &lt;class 'httpcore.ConnectError'&gt;}

    @contextlib.contextmanager
    def map_exceptions(map: ExceptionMapping) -&gt; typing.Iterator[None]:
        try:
            yield
        except Exception as exc:  # noqa: PIE786
            for from_exc, to_exc in map.items():
                if isinstance(exc, from_exc):
&gt;                   raise to_exc(exc) from exc
E                   httpcore.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

.venv\Lib\site-packages\httpcore\_exceptions.py:14: ConnectError

The above exception was the direct cause of the following exception:

    def test_get_users():
        with httpx.Client(timeout=10) as client:
&gt;           resp = client.request("GET", BASE_URL + "/users", params={}, json={}, headers={"Accept":"application/json"})
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests_generated\test_generated_api.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\httpx\_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
.venv\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpx\_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpx\_transports\default.py:249: in handle_request
    with map_httpcore_exceptions():
C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:158: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @contextlib.contextmanager
    def map_httpcore_exceptions() -&gt; typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
&gt;           raise mapped_exc(message) from exc
E           httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

.venv\Lib\site-packages\httpx\_transports\default.py:118: ConnectError</failure></testcase><testcase classname="tests_generated.test_generated_api" name="test_get_users__id_" time="6.205"><failure message="httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it">@contextlib.contextmanager
    def map_httpcore_exceptions() -&gt; typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
&gt;           yield

.venv\Lib\site-packages\httpx\_transports\default.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\httpx\_transports\default.py:250: in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpcore\_sync\connection_pool.py:256: in handle_request
    raise exc from None
.venv\Lib\site-packages\httpcore\_sync\connection_pool.py:236: in handle_request
    response = connection.handle_request(
.venv\Lib\site-packages\httpcore\_sync\connection.py:101: in handle_request
    raise exc
.venv\Lib\site-packages\httpcore\_sync\connection.py:78: in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpcore\_sync\connection.py:124: in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpcore\_backends\sync.py:207: in connect_tcp
    with map_exceptions(exc_map):
C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:158: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

map = {&lt;class 'TimeoutError'&gt;: &lt;class 'httpcore.ConnectTimeout'&gt;, &lt;class 'OSError'&gt;: &lt;class 'httpcore.ConnectError'&gt;}

    @contextlib.contextmanager
    def map_exceptions(map: ExceptionMapping) -&gt; typing.Iterator[None]:
        try:
            yield
        except Exception as exc:  # noqa: PIE786
            for from_exc, to_exc in map.items():
                if isinstance(exc, from_exc):
&gt;                   raise to_exc(exc) from exc
E                   httpcore.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

.venv\Lib\site-packages\httpcore\_exceptions.py:14: ConnectError

The above exception was the direct cause of the following exception:

    def test_get_users__id_():
        with httpx.Client(timeout=10) as client:
&gt;           resp = client.request("GET", BASE_URL + "/users/{id}", params={'id': 1}, json={}, headers={"Accept":"application/json"})
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests_generated\test_generated_api.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\httpx\_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
.venv\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpx\_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpx\_transports\default.py:249: in handle_request
    with map_httpcore_exceptions():
C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:158: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @contextlib.contextmanager
    def map_httpcore_exceptions() -&gt; typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
&gt;           raise mapped_exc(message) from exc
E           httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

.venv\Lib\site-packages\httpx\_transports\default.py:118: ConnectError</failure></testcase><testcase classname="tests_generated.test_generated_api" name="test_get_posts" time="6.672"><failure message="httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it">@contextlib.contextmanager
    def map_httpcore_exceptions() -&gt; typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
&gt;           yield

.venv\Lib\site-packages\httpx\_transports\default.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\httpx\_transports\default.py:250: in handle_request
    resp = self._pool.handle_request(req)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpcore\_sync\connection_pool.py:256: in handle_request
    raise exc from None
.venv\Lib\site-packages\httpcore\_sync\connection_pool.py:236: in handle_request
    response = connection.handle_request(
.venv\Lib\site-packages\httpcore\_sync\connection.py:101: in handle_request
    raise exc
.venv\Lib\site-packages\httpcore\_sync\connection.py:78: in handle_request
    stream = self._connect(request)
             ^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpcore\_sync\connection.py:124: in _connect
    stream = self._network_backend.connect_tcp(**kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpcore\_backends\sync.py:207: in connect_tcp
    with map_exceptions(exc_map):
C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:158: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

map = {&lt;class 'TimeoutError'&gt;: &lt;class 'httpcore.ConnectTimeout'&gt;, &lt;class 'OSError'&gt;: &lt;class 'httpcore.ConnectError'&gt;}

    @contextlib.contextmanager
    def map_exceptions(map: ExceptionMapping) -&gt; typing.Iterator[None]:
        try:
            yield
        except Exception as exc:  # noqa: PIE786
            for from_exc, to_exc in map.items():
                if isinstance(exc, from_exc):
&gt;                   raise to_exc(exc) from exc
E                   httpcore.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

.venv\Lib\site-packages\httpcore\_exceptions.py:14: ConnectError

The above exception was the direct cause of the following exception:

    def test_get_posts():
        with httpx.Client(timeout=10) as client:
&gt;           resp = client.request("GET", BASE_URL + "/posts", params={}, json={}, headers={"Accept":"application/json"})
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests_generated\test_generated_api.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
.venv\Lib\site-packages\httpx\_client.py:825: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
.venv\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpx\_client.py:1014: in _send_single_request
    response = transport.handle_request(request)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv\Lib\site-packages\httpx\_transports\default.py:249: in handle_request
    with map_httpcore_exceptions():
C:\Users\DELL\AppData\Local\Programs\Python\Python311\Lib\contextlib.py:158: in __exit__
    self.gen.throw(typ, value, traceback)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    @contextlib.contextmanager
    def map_httpcore_exceptions() -&gt; typing.Iterator[None]:
        global HTTPCORE_EXC_MAP
        if len(HTTPCORE_EXC_MAP) == 0:
            HTTPCORE_EXC_MAP = _load_httpcore_exceptions()
        try:
            yield
        except Exception as exc:
            mapped_exc = None
    
            for from_exc, to_exc in HTTPCORE_EXC_MAP.items():
                if not isinstance(exc, from_exc):
                    continue
                # We want to map to the most specific exception we can find.
                # Eg if `exc` is an `httpcore.ReadTimeout`, we want to map to
                # `httpx.ReadTimeout`, not just `httpx.TimeoutException`.
                if mapped_exc is None or issubclass(to_exc, mapped_exc):
                    mapped_exc = to_exc
    
            if mapped_exc is None:  # pragma: no cover
                raise
    
            message = str(exc)
&gt;           raise mapped_exc(message) from exc
E           httpx.ConnectError: [WinError 10061] No connection could be made because the target machine actively refused it

.venv\Lib\site-packages\httpx\_transports\default.py:118: ConnectError</failure></testcase></testsuite></testsuites>